name: 'Apply'

env:
  # this prefix will be appended to Terraform workspace name and variable file e.g.
  # workspace: infra-nameprovided
  # var file: infra-nameprovided.tfvars
  PROJECT_PREFIX: tap

on:
  workflow_dispatch:
    inputs:
      project_name:
        description: 'Tap class name'
        required: true
        default: 'demo'
      apply_changes:
        type: choice
        description: Apply changes after plan?
        options:
          - 'no'
          - 'yes'

permissions:
  contents: read

jobs:
  plan:
    name: "Terraform Plan"
    if: github.event.inputs.apply_changes == 'no'

    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_IAM_ACCESS }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_IAM_SECRET }}
      run: terraform init

    - name: Set Terraform Workspace
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_IAM_ACCESS }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_IAM_SECRET }}
      run: terraform workspace select $PROJECT_PREFIX-${{ github.event.inputs.project_name }} || terraform workspace new $PROJECT_PREFIX-${{ github.event.inputs.project_name }}

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check -diff
      # continue-on-error: true

    - name: Terraform Plan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_IAM_ACCESS }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_IAM_SECRET }}
      run: terraform plan -var=bootstrap_password='${{ secrets.TAP_USER_PASS }}' --var-file envs/$PROJECT_PREFIX-${{ github.event.inputs.project_name }}.tfvars

  Applydev:
    name: "Terraform Apply"
    if: github.event.inputs.apply_changes == 'yes'

    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_IAM_ACCESS }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_IAM_SECRET }}
      run: terraform init

    - name: Set Terraform Workspace
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_IAM_ACCESS }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_IAM_SECRET }}
      run: terraform workspace select $PROJECT_PREFIX-${{ github.event.inputs.project_name }} || terraform workspace new $PROJECT_PREFIX-${{ github.event.inputs.project_name }}

    - name: Terraform Apply
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_IAM_ACCESS }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_IAM_SECRET }}
      run: terraform apply -auto-approve -var=bootstrap_password='${{ secrets.TAP_USER_PASS }}' --var-file envs/$PROJECT_PREFIX-${{ github.event.inputs.project_name }}.tfvars

    - name: Terraform Output
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_IAM_ACCESS }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_IAM_SECRET }}
      run: terraform output